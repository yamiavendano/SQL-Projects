-- Exploratory Data Analysis
-- Exploring data to find trends, patterns, or anything interesting

SELECT * 
FROM layoffs_staging2;

-- lets look at the MAX/MIN percentage laid off

SELECT MAX(total_laid_off), MAX(percentage_laid_off)
FROM layoffs_staging2;

-- companies that had lots of funding and completely went out of business

SELECT * 
FROM layoffs_staging2
WHERE percentage_laid_off =1
ORDER BY funds_raised_millions DESC;

-- companies with the most total layoffs

SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUp BY company
ORDER BY 2 DESC;

-- total in the past 3 years or in the dataset

SELECT MIN(`date`), MAX(`date`)
FROM layoffs_staging2;


SELECT stage, SUM(total_laid_off)
FROM layoffs_staging2
GROUp BY stage
ORDER BY 2 DESC;

-- layoffs per year

SELECT * 
FROM layoffs_staging2;

SELECT YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUp BY YEAR(`date`)
ORDER BY 1 DESC;

SELECT company, AVG(percentage_laid_off)
FROM layoffs_staging2
GROUp BY company
ORDER BY 2 DESC;


-- lets see how many people were laid off and create CTE to show rolling total

SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off)
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7)IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC
;

WITH Rolling_Total AS
(SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off) AS total_off
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7)IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC
)
SELECT `MONTH`, total_off
,SUM(total_off) OVER(ORDER BY `MONTH`) AS rolling_total
FROM Rolling_Total;

SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUp BY company
ORDER BY 2 DESC;

-- lets see how many people companies were laying off per year and create CTE to rank them

SELECT company, YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUp BY company, YEAR(`date`)
ORDER BY 3 DESC;

WITH Company_Year  (company, years, total_laid_off) AS
(SELECT company, YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUp BY company, YEAR(`date`)
), Company_Year_Rank AS 
(SELECT *, 
DENSE_RANK() OVER (PARTITION BY years ORDER BY total_laid_off DESC) AS Ranking
FROM Company_Year
WHERE years IS NOT NULL
)
SELECT *
FROM Company_Year_Rank
WHERE Ranking <= 5
