In this project we take raw world layoffs data and transform it in SQL to make it more usable for analysis


SELECT *
FROM layoffs;

--Create a staging table

CREATE TABLE layoffs_staging 
LIKE layoffs;

INSERT layoffs_staging
SELECT *
FROM layoffs;

------------------------------------------------------------------------------------------------------------------
REMOVE DUPLICATES

SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions ) AS row_num
FROM layoffs_staging;

WITH duplicate_cte AS
(
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions ) AS row_num
FROM layoffs_staging
)

SELECT * 
FROM duplicate_cte 
WHERE row_num > 1;

--To confirm duplicates we look at Oda

SELECT *
FROM layoffs_staging
WHERE  company = 'Oda';

--These entries are not duplicates, so we need to look at each row to confirm


--Create new column to find duplicates

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` text,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` text,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


SELECT *
FROM layoffs_staging2;

INSERT INTO layoffs_staging2
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions ) AS row_num
FROM layoffs_staging;

-- These are duplicates

SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

-- Now we delete where row numbers are greater than  2 

DELETE
FROM layoffs_staging2
WHERE row_num > 1;

SELECT *
FROM layoffs_staging2;

-----------------------------------------------------------------------------------------------------------------------

STANDARDIZE DATA

-- Remove any white spaces

SELECT company, TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

UPDATE layoffs_staging2
SET company = TRIM(company);

-- Look at individual columns for null, empty rows, or other errors

SELECT DISTINCT industry
FROM layoffs_staging2
ORDER BY 1;

-- Crypto has multiple variations so we fix that

SELECT *
FROM layoffs_staging2 
WHERE industry LIKE '%Crypto%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

SELECT DISTINCT country
FROM layoffs_staging2
ORDER BY 1;

-- Trim period at the end of United States

SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- Change text column to date

SELECT 	`date`	
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = 
    CASE
    WHEN `date` IS NOT NULL AND `date` IS NULL THEN STR_TO_DATE(`date`, '%m/%d/%Y')
    ELSE NULL
    END;

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

----------------------------------------------------------------------------------------------------------------
-- NULL OR BLANK VALUES

SELECT 	*
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';


SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
OR industry = '';

SELECT *
FROM layoffs_staging2
WHERE company = 'Airbnb';

SELECT t1.indusrty, t2.industry
FROM layoffs_staging2 AS t1
Join layoffs_staging2 AS t2
  ON t1.company = t2.company
  AND t1.location = t2.location
WHERE (t1.industry IS NULL OR t1.industry = '')
AND t2.industry IS NOT NULL;

UPDATE layoffs_staging2 AS t1
JOIN layoffs_staging2 AS t2
	ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL 
AND t2.industry IS NOT NULL;

SELECT *
FROM layoffs_staging2;

-------------------------------------------------------------------------------------------------------------

-- REMOVE UNNECESSARY COLUMNS AND ROWS

SELECT 	*
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

DELETE
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL

SELECT *
FROM layoffs_staging2;

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;
